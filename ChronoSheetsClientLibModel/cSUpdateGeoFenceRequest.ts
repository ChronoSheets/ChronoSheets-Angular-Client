/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CSBasicCoordinate } from './cSCSBasicCoordinate';


/**
 * A request object for updating a new geofence
 */
export interface CSUpdateGeoFenceRequest { 
    /**
     * The ID of the geofence you want to update
     */
    geofenceId?: number;
    /**
     * The name of the geo fence
     */
    name?: string;
    /**
     * A list of coordinates specifying the geofence region
     */
    fenceCoordinates?: Array<CSBasicCoordinate>;
    /**
     * The job code to be used when the person enters/leaves the geofence
     */
    triggerJobCodeId?: number;
    /**
     * The task to be used when the person enters/leaves the geofence
     */
    triggerTaskId?: number;
    /**
     * Send an alert to a user, specified by their user ID
     */
    sendAlertToOrgGroupId?: number;
    /**
     * Define when you want the alerts to be setn
     */
    alertSettings?: CSUpdateGeoFenceRequest.CSAlertSettingsEnum;
    /**
     * Define how to you want to trigger the timesheet automation
     */
    triggerSettings?: CSUpdateGeoFenceRequest.CSTriggerSettingsEnum;
    /**
     * The start hour in which this geofence should apply.  After this time, the geofence will be active.
     */
    startTimeHour?: number;
    /**
     * The start minute in which this geofence should apply.  After this time, the geofence will be active.
     */
    startTimeMinute?: number;
    /**
     * The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive.
     */
    endTimeHour?: number;
    /**
     * The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive.
     */
    endTimeMinute?: number;
}
export namespace CSUpdateGeoFenceRequest {
    export type CSAlertSettingsEnum = 'None' | 'SendWhenEntering' | 'SendWhenExiting' | 'SendWhenEnteringOrExiting';
    export const CSAlertSettingsEnum = {
        None: 'None' as CSAlertSettingsEnum,
        SendWhenEntering: 'SendWhenEntering' as CSAlertSettingsEnum,
        SendWhenExiting: 'SendWhenExiting' as CSAlertSettingsEnum,
        SendWhenEnteringOrExiting: 'SendWhenEnteringOrExiting' as CSAlertSettingsEnum
    };
    export type CSTriggerSettingsEnum = 'None' | 'StartTimesheetWhenEntering' | 'StopTimesheetWhenEntering' | 'StartOnEnterStopOnLeave';
    export const CSTriggerSettingsEnum = {
        None: 'None' as CSTriggerSettingsEnum,
        StartTimesheetWhenEntering: 'StartTimesheetWhenEntering' as CSTriggerSettingsEnum,
        StopTimesheetWhenEntering: 'StopTimesheetWhenEntering' as CSTriggerSettingsEnum,
        StartOnEnterStopOnLeave: 'StartOnEnterStopOnLeave' as CSTriggerSettingsEnum
    };
}
