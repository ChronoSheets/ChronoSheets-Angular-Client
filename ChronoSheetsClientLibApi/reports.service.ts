/**
 * ChronoSheets API
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CsApiCsApiApiResponseCombinedReportsData } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseCombinedReportsData';
import { CsApiCsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment';
import { CsApiCsApiApiResponseForPaginatedListOrgReportTrip } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseForPaginatedListOrgReportTrip';
import { CsApiCsApiApiResponseForPaginatedListRawReportItem } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseForPaginatedListRawReportItem';
import { CsApiCsApiApiResponseListJobSeriesReportItem } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseListJobSeriesReportItem';
import { CsApiCsApiApiResponseListProjectCostingReportItem } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseListProjectCostingReportItem';
import { CsApiCsApiApiResponseTrip } from '../ChronoSheetsClientLibModel/csApiCsApiApiResponseTrip';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReportsService {

    protected basePath = 'https://www.chronosheets.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects)
     * 
     * @param startDate 
     * @param endDate 
     * @param userIds 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseCombinedReportsData>;
    public reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseCombinedReportsData>>;
    public reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseCombinedReportsData>>;
    public reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsGetAllChartsDataAdmin.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsGetAllChartsDataAdmin.');
        }
        if (userIds === null || userIds === undefined) {
            throw new Error('Required parameter userIds was null or undefined when calling reportsGetAllChartsDataAdmin.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetAllChartsDataAdmin.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }
        if (userIds !== undefined) {
            queryParameters = queryParameters.set('UserIds', <any>userIds);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseCombinedReportsData>(`${this.basePath}/api/Reports/GetAllChartsDataAdmin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Consolidated User Reports Data (Jobs and Tasks)
     * 
     * @param startDate 
     * @param endDate 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseCombinedReportsData>;
    public reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseCombinedReportsData>>;
    public reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseCombinedReportsData>>;
    public reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsGetAllChartsDataUser.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsGetAllChartsDataUser.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetAllChartsDataUser.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseCombinedReportsData>(`${this.basePath}/api/Reports/GetAllChartsDataUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get trip by Id, for reporting purposes
     * 
     * @param tripId The ID of the trip
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetOrgTripById(tripId: number, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseTrip>;
    public reportsGetOrgTripById(tripId: number, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseTrip>>;
    public reportsGetOrgTripById(tripId: number, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseTrip>>;
    public reportsGetOrgTripById(tripId: number, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tripId === null || tripId === undefined) {
            throw new Error('Required parameter tripId was null or undefined when calling reportsGetOrgTripById.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetOrgTripById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tripId !== undefined) {
            queryParameters = queryParameters.set('TripId', <any>tripId);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseTrip>(`${this.basePath}/api/Reports/GetOrgTripById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reports on Organisation timesheet file attachments
     * 
     * @param startDate 
     * @param endDate 
     * @param skip 
     * @param take 
     * @param userIds 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>;
    public reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>>;
    public reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>>;
    public reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }
        if (userIds === null || userIds === undefined) {
            throw new Error('Required parameter userIds was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetOrganisationTimesheetFileAttachments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }
        if (userIds !== undefined) {
            queryParameters = queryParameters.set('UserIds', <any>userIds);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(`${this.basePath}/api/Reports/GetOrganisationTimesheetFileAttachments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation)
     * 
     * @param startDate 
     * @param endDate 
     * @param skip 
     * @param take 
     * @param userIds 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetOrganisationTrips(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseForPaginatedListOrgReportTrip>;
    public reportsGetOrganisationTrips(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseForPaginatedListOrgReportTrip>>;
    public reportsGetOrganisationTrips(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseForPaginatedListOrgReportTrip>>;
    public reportsGetOrganisationTrips(startDate: Date, endDate: Date, skip: number, take: number, userIds: string, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsGetOrganisationTrips.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsGetOrganisationTrips.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling reportsGetOrganisationTrips.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling reportsGetOrganisationTrips.');
        }
        if (userIds === null || userIds === undefined) {
            throw new Error('Required parameter userIds was null or undefined when calling reportsGetOrganisationTrips.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetOrganisationTrips.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }
        if (userIds !== undefined) {
            queryParameters = queryParameters.set('UserIds', <any>userIds);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseForPaginatedListOrgReportTrip>(`${this.basePath}/api/Reports/GetOrganisationTrips`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Timesheets Raw Data
     * 
     * @param startDate 
     * @param endDate 
     * @param userIds 
     * @param sort 0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters
     * @param order 0 &#x3D; Ascending, 1 &#x3D; Descending
     * @param skip 
     * @param take 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsGetRawDataAdmin(startDate: Date, endDate: Date, userIds: string, sort: number, order: number, skip: number, take: number, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseForPaginatedListRawReportItem>;
    public reportsGetRawDataAdmin(startDate: Date, endDate: Date, userIds: string, sort: number, order: number, skip: number, take: number, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseForPaginatedListRawReportItem>>;
    public reportsGetRawDataAdmin(startDate: Date, endDate: Date, userIds: string, sort: number, order: number, skip: number, take: number, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseForPaginatedListRawReportItem>>;
    public reportsGetRawDataAdmin(startDate: Date, endDate: Date, userIds: string, sort: number, order: number, skip: number, take: number, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (userIds === null || userIds === undefined) {
            throw new Error('Required parameter userIds was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (sort === null || sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling reportsGetRawDataAdmin.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsGetRawDataAdmin.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }
        if (userIds !== undefined) {
            queryParameters = queryParameters.set('UserIds', <any>userIds);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('Sort', <any>sort);
        }
        if (order !== undefined) {
            queryParameters = queryParameters.set('Order', <any>order);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseForPaginatedListRawReportItem>(`${this.basePath}/api/Reports/GetRawDataAdmin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets project cost estimations VS actual cost for date range and users
     * 
     * @param startDate 
     * @param endDate 
     * @param userIds 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsProjectCostingsAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseListProjectCostingReportItem>;
    public reportsProjectCostingsAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseListProjectCostingReportItem>>;
    public reportsProjectCostingsAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseListProjectCostingReportItem>>;
    public reportsProjectCostingsAdmin(startDate: Date, endDate: Date, userIds: string, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsProjectCostingsAdmin.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsProjectCostingsAdmin.');
        }
        if (userIds === null || userIds === undefined) {
            throw new Error('Required parameter userIds was null or undefined when calling reportsProjectCostingsAdmin.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsProjectCostingsAdmin.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }
        if (userIds !== undefined) {
            queryParameters = queryParameters.set('UserIds', <any>userIds);
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseListProjectCostingReportItem>(`${this.basePath}/api/Reports/ProjectCostingsAdmin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Timeseries jobs data for the logged in user
     * 
     * @param startDate 
     * @param endDate 
     * @param xChronosheetsAuth The ChronoSheets Auth Token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'body', reportProgress?: boolean): Observable<CsApiApiResponseListJobSeriesReportItem>;
    public reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CsApiApiResponseListJobSeriesReportItem>>;
    public reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CsApiApiResponseListJobSeriesReportItem>>;
    public reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling reportsUserJobsOverTime.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling reportsUserJobsOverTime.');
        }
        if (xChronosheetsAuth === null || xChronosheetsAuth === undefined) {
            throw new Error('Required parameter xChronosheetsAuth was null or undefined when calling reportsUserJobsOverTime.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('StartDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('EndDate', <any>endDate.toISOString());
        }

        let headers = this.defaultHeaders;
        if (xChronosheetsAuth !== undefined && xChronosheetsAuth !== null) {
            headers = headers.set('x-chronosheets-auth', String(xChronosheetsAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CsApiApiResponseListJobSeriesReportItem>(`${this.basePath}/api/Reports/UserJobsOverTime`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
